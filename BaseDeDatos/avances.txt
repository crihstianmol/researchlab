// Usamos el siguiente comando para crear la base de datos, en caso de que no exista
use researchlab-db

// Usamos el siguiente comando para crear nuestra collecion de datos, como primer parametro el nombre de la coleccion, como segundo parametro un validador de modelo
db.createCollection(
    'avances', { // Nombre de la collecion como primer parametro
        validator: { // Iniciamos el validador
            $jsonSchema: { // Iniciamos el Esquema de la collecion
                bsonType: 'object', // La collecion guardara objetos
                required: [ 'projectId', 'userId', 'date', 'description', 'observations' ], // Estas serán las propiedades
                properties: { // Se inicializa la definicion de las propiedades
                    projectId: { // Se define la propiedad, el tipo de dato y la descripcion
                        bsonType: 'string',
                        description: 'Must be a String and is required'
                    },
                    userId: { // Se define la propiedad, el tipo de dato y la descripcion
                        bsonType: 'string'
                        description: 'Must be a String and is required'
                    },
                    date: { // Se define la propiedad, el tipo de dato y la descripcion
                        bsonType: 'string',
                        description: 'Must be a String and is required'
                    },
                    description: { // Se define la propiedad, el tipo de dato y la descripcion
                        bsonType: 'string',
                        description: 'Must be a String and is required'
                    },
                    observations: { // Se define la propiedad, el tipo de dato y la descripcion
                        bsonType: 'array',
                        uniqueItems: true,
                        description: 'Must be an Object Array and is required'
                        items: { // Se definen los items dentro del array
                            bsonType: ['object'], // El tipo de dato
                            required: ['user','observation'], // Las propiedades
                            properties:{
                                user:{ // El tipo de dato de las propiedades
                                    bsonType: 'string,
                                    description: 'Must be a String and is required'
                                },
                                observation:{
                                    bsonType: 'string,
                                    description: 'Must be a String and is required'
                                }
                            }
                        }
                    }
                }
            }
        }
    }
)

// Usamos el siguiente comando para consultar si tenemos datos en nuestra collecion
db.avances.find()

// Usamos el siguiente comando para insertar un dato en la coleccion
db.avances.insertOne({
    projectId: 'XXXXXX', // Insertamos Id del Projecto
    userCreatorId: 'XXXXXX', // Insertamos Id del Usuario Creador
    date: '2021-11-20', // Insertamos Fecha de creacion
    description: 'Descripcion del avance', // Insertamos descripcion
    observations: [ // Insertamos el arreglo de observaciones
        {
            userId: 'XXXXXX',
            observation: 'Observacion'
        },
        {
            userId: 'XXXXXX',
            observation: 'Observacion 2'
        }
    ]
})
// Usamos el siguiente comando consultar entre los datos insertados en una collecion usando como filtro alguna propiedad
db.avances.find({ projectId:'XXXXXX' }) 

// Usamos el siguiente comando Actualizar los datos de un registro se pasa un filtro y luego se pone la información que se quiere actualizar 
db.avances.updateOne({ projectId:'XXXXXX'} , { $set: { date:'2021-11-21' } })

// Para borrar un registro debe de usarse un filtro, de preferencia que sea unico 
db.avances.deleteOne({ projectId:'XXXXXX' })